# Run this playbook to initialise your machines
# ansible-playbook -i inventory/php initialize.yml --extra-vars "@/path/to/admins.yml"
# ansible-playbook -i inventory/php initRsync.yml --extra-vars "@/home/jacoba/dev/stf-php-ansible/etc/admins.yml"

# Set up firewall on all services
- hosts:
  - rsync

  remote_user: root

  pre_tasks:
    # Add UFW firewall configuration so that the services are only accessible through the public ip of the jumphosts
  - name: Ensure UFW is installed
    apt:
      name: ufw
      state: present
      update_cache: yes

  - name: Allow ssh only from jumphost
    ufw:
      rule: allow
      from_ip: "{{ item }}"
      port: 22
    loop:
      - "{{ hostvars['jumphost0']['ansible_facts']['default_ipv4']['address'] }}"
      - "{{ hostvars['jumphost1']['ansible_facts']['default_ipv4']['address'] }}"

  - name: Allow incoming requests from port 80 and 443
    ufw:
      rule: allow
      port: "{{ item }}"
    loop:
      - 80
      - 443

  - name: Allow incoming rsync requests from 873/tcp from services
    ufw:
      rule: allow
      from_ip: "{{ item }}"
      port: 873
      proto: tcp
    loop:
      - "{{ hostvars['service0']['ansible_facts']['default_ipv4']['address'] }}"
      - "{{ hostvars['service1']['ansible_facts']['default_ipv4']['address'] }}"
      - "{{ hostvars['service2']['ansible_facts']['default_ipv4']['address'] }}"
      - "{{ hostvars['service3']['ansible_facts']['default_ipv4']['address'] }}"

  - name: Enable UFW and deny incoming requests
    ufw:
      state: enabled
      policy: deny


  - name: Create a linux user and add it to sudo group
    user:
      name: "{{ item.name }}"
      create_home: yes
      state: present
      groups: sudo
      append: yes
      shell: /bin/bash
    loop: "{{ admins }}"

  # Allow members of group sudo to execute any command without specifying their password
  - name: Configure sudoers
    copy:
      dest: /etc/sudoers.d/20-sudo-password
      content: '%sudo ALL=(ALL) NOPASSWD: ALL'

  - name: Copy admin's ssh-keys
    loop: "{{ admins }}"
    include_role:
      name: add_ssh_key
    vars:
      username: "{{ item.name }}"
      pubkeys: "{{ item.pubkeys }}"

  - name: create local systems
    file:
      state: directory
      dest: /local/systems
      mode: '0750'

- hosts:
  - rsync

  become: yes
  become_user: root

  roles:
   - role: properties/rsync
