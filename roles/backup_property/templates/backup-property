#!/bin/sh

cd {{ backup_dir }}

# Redirect all output to the backup.log
DOW=`date +%w`
exec > "/local/systems/backup-{{ property }}-${DOW}.log" 2>&1

echo "[$(date)] Starting backup process..."

# Environment Variables
export AWS_ACCESS_KEY_ID="{{ DO_access_key }}"
export AWS_SECRET_ACCESS_KEY="{{ DO_secret_key }}"
export RESTIC_PASSWORD="{{ restic_password }}"

# Do backups of databases (assume that root can always read them)
{% if backup_dbs is defined() %}
{% for backup_db in backup_dbs %}

    # Backup database {{ backup_db }}
    mysqldump -u root "{{ backup_db }}" > "/local/{{ backup_db }}.sql"

    restic -r s3:{{ DO_bucket_url }}/{{ DO_bucket_name }}/{{ property }} backup "/local/{{ backup_db }}.sql"
    exit_status=$?
    echo "restic status: " $exit_status

    if [ $exit_status -eq 0 ]; then
      echo "[$(date)] restic upload completed."

    else
      echo "[$(date)] Could not upload data."
    fi

    # Removing temporary data
    rm "/local/{{ backup_db }}.sql"

{% endfor %}
{% endif %}

# Do backups of directories
{% if backup_paths is defined() %}
{% for backup_path in backup_paths %}

    # Backup path {{ backup_path }}
    restic -r s3:{{ DO_bucket_url }}/{{ DO_bucket_name }}/{{ property }} backup {{ backup_path }}
    exit_status=$?
    echo "restic status: " $exit_status

    if [ $exit_status -eq 0 ]; then
      echo "[$(date)] restic upload completed."

    else
      echo "[$(date)] Could not upload data."
    fi

{% endfor %}
{% endif %}

echo "[$(date)] Pruning old backups."

restic -r s3:{{ DO_bucket_url }}/{{ DO_bucket_name }}/{{ property }} forget --keep-daily 7 --keep-weekly 4 --keep-monthly 6 --prune

echo "[$(date)] Backup process finished successfully."
