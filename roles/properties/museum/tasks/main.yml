# This role sets up the property museum.php.net with NGINX together with the fancyindex module

- name: Install Software
  apt:
    name:
    - git
    - build-essential
    - libpcre3
    - libpcre3-dev
    - zlib1g
    - zlib1g-dev
    - libssl-dev
    - htop
    - lsof
    state: present
    update_cache: yes

# Install nginx with fancyindex: https://github.com/aperezdc/ngx-fancyindex?tab=readme-ov-file#building
- name: Download the latest version of Nginx source
  get_url:
    url: http://nginx.org/download/nginx-{{ nginx_version }}.tar.gz
    dest: /tmp/nginx-{{ nginx_version }}.tar.gz

- name: Extract Nginx source
  unarchive:
    src: /tmp/nginx-{{ nginx_version }}.tar.gz
    dest: /tmp
    remote_src: yes

- name: Download ngx-fancyindex module
  git:
    repo: https://github.com/aperezdc/ngx-fancyindex.git
    dest: /tmp/ngx-fancyindex

# We use self signed SSL certs, so --with-http_ssl_module is needed
# default user is nobody
- name: Compile and install Nginx with ngx-fancyindex
  shell: |
    cd /tmp/nginx-{{ nginx_version }}
    ./configure --user=www-data --group=www-data --with-http_ssl_module --add-module=/tmp/ngx-fancyindex
    make
    make install
  args:
    chdir: /tmp
    creates: /usr/local/nginx/sbin/nginx

# Make `nginx` available in Terminal
- name: Make nginx available in PATH
  file:
    src: /usr/local/nginx/sbin/nginx
    dest: /usr/bin/nginx
    state: link

- name: Create the SSL Certificate
  include_role:
    name: add_self-signed_certs

- name: Create a strong Diffie-Hellman group
  command: openssl dhparam -out /etc/ssl/certs/dhparam.pem 4096
  args:
    creates: /etc/ssl/certs/dhparam.pem

- name: Set permissions for Nginx log and temp directory
  file:
    path: /usr/local/nginx
    state: directory
    mode: "755"
    owner: www-data
    group: www-data
    recurse: yes

- name: Set permissions for ssl certs
  file:
    path: "{{ item }}"
    mode: "600"
    owner: www-data
    group: www-data
  loop:
    - /etc/ssl/certs/php-self-signed.key
    - /etc/ssl/certs/php-self-signed.crt

- name: Create Nginx systemd service file
  template:
    dest: /etc/systemd/system/nginx.service
    src: templates/nginx.service
    mode: "644"

- name: Reload systemd daemon
  command: systemctl daemon-reload

- name: Create sites-enabled directory
  file:
    state: directory
    dest: /usr/local/nginx/conf/sites-enabled
    mode: "755"
    owner: www-data
    group: www-data

- name: Add museum nginx config file
  template:
    src: templates/museumweb.conf
    dest: /usr/local/nginx/conf/sites-enabled/default
  notify: reload nginx

- name: Include museum config in nginx.conf
  blockinfile:
    path: /usr/local/nginx/conf/nginx.conf
    block: |
      include /usr/local/nginx/conf/sites-enabled/*;
    insertafter: '^http\s*{'
    state: present
  notify: reload nginx

- name: start nginx
  service:
    name: nginx
    state: started
    enabled: yes

# Firewall settings
- name: Block port 80 access
  ufw:
    rule: deny
    proto: tcp
    port: 80

- name: Allow access to port 443 only from Myra hosts
  ufw:
    rule: allow
    port: 443
    proto: tcp
    src: "{{ item }}"
  loop: "{{ myra_hosts }}"

- name: Block port 443 access for elsewhere
  ufw:
    rule: deny
    port: 443
    proto: tcp

# make sure there is a directory for the museum data
- include_tasks: deploy.yml

- name: Run backup tasks
  include_role:
    name: backup_property
  vars:
    property: museum
    backup_path: '{{ museum_docroot }}/{{ museum_domain }}'

# This can be run when backup data is run at least once and available for restore
# The restore role should be skipped when initializing the property for the first time with --extra-vars "first_run=true"
- name: Run restore tasks
  include_role:
    name: restore_property
  vars:
    property: museum
    backup_path: "{{ museum_docroot }}/{{ museum_domain }}"
  when: first_run is not defined or not first_run
