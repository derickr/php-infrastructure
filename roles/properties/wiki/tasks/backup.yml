# Reference backup script: https://github.com/php/systems/blob/master/backup-wiki-php-net
- name: Install bzip2
  apt:
    name: bzip2
    state: present

- name: Setting backup name
  set_fact:
    backup_name_data: "data-{{ ansible_date_time.date }}"
    backup_name_media: "media-{{ ansible_date_time.date }}"

- name: Ensure backup directories exist
  file:
    path: "{{ backup_dir }}/{{ item }}"
    state: directory
    mode: '755'
  loop:
    - data
    - data/archive
    - data/daily
    - media
    - media/archive
    - media/daily

# the next 3 tasks are for test purposes and can be removed once proper data is added to the machine
- name: Test - Create test data directory
  file:
    path: "{{ wiki_home_path }}/{{item}}"
    state: directory
    mode: '755'
  loop:
    - data
    - data/archive
    - data/daily
    - media
    - media/archive
    - media/daily

- name: Test - Create test data in base directory
  copy:
    dest: "{{ wiki_home_path }}/data/test_data.txt"
    content: |
      This is test data for {{ wiki_home_path }}/data.

- name: Test - Create test data in wiki home directory
  copy:
    dest: "{{ wiki_home_path }}/media/test_media.txt"
    content: |
      This is test data for {{ wiki_home_path }}/media.
# ---

# Initialize Restic for both data and media folders
- name: Initialize Restic
  command:
    cmd: "restic -r s3:{{ DO_bucket_url }}/{{ DO_bucket_name }}/wiki/{{ item }} init"
  environment:
    AWS_ACCESS_KEY_ID: "{{ DO_access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ DO_secret_key }}"
    RESTIC_PASSWORD: "{{ restic_password }}"
  ignore_errors: yes # it throws an error when it is already initialized
  loop:
    - data
    - media

- name: Create backup script
  template:
    src: templates/backup-wiki
    dest: "/local/systems/backup-wiki"
    mode: "755"

- name: Create daily property backup
  cron:
    name: Daily property backup
    job: "/local/systems/backup-wiki"
    special_time: daily
    state: present

- name: Daily prune wiki/data, keep only the last 2 backups
  cron:
    name: Daily prune files
    job: |
      AWS_ACCESS_KEY_ID="{{ DO_access_key }}" AWS_SECRET_ACCESS_KEY="{{ DO_secret_key }}" RESTIC_PASSWORD="{{ restic_password }}" restic -r s3:{{ DO_bucket_url }}/{{ DO_bucket_name }}/wiki/data forget --keep-last 2 --prune
    state: present
    special_time: daily

- name: Daily prune wiki/media, keep only the last 2 backups
  cron:
    name: Daily prune files
    job: |
      AWS_ACCESS_KEY_ID="{{ DO_access_key }}" AWS_SECRET_ACCESS_KEY="{{ DO_secret_key }}" RESTIC_PASSWORD="{{ restic_password }}" restic -r s3:{{ DO_bucket_url }}/{{ DO_bucket_name }}/wiki/media forget --keep-last 2 --prune
    state: present
    special_time: daily
