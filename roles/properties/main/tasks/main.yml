- name: Install Apache with mod-php, php, cli-php and mariaDB
  apt:
    name:
      - apache2
      - libapache2-mod-php8.2
      - php8.2
      - php8.2-cli
      - mariadb-server
    state: present
    update_cache: yes

- name: create local box
  file:
    state: directory
    dest: /local/this-box
    mode: '750'

- name: Store secrets file
  template:
    src: templates/secrets.conf
    dest: /local/this-box/apache.conf
    mode: '600'
    owner: www-data
    group: www-data

- name: Add Apache config for main.php.net
  template:
    src: templates/main.php.net.conf
    dest: /etc/apache2/sites-available/main.php.net.conf
  notify: reload apache

- name: Enable Apache modules
  command: a2enmod {{ item }}
  args:
    creates: /etc/apache2/mods-enabled/{{ item }}.conf
  loop:
    - rewrite
    - php8.2
  notify: reload apache

- name: Enable config file
  command: a2ensite main.php.net.conf
  notify: reload apache

- name: Ensure Apache is started and enabled
  service:
    name: apache2
    state: started
    enabled: yes

- include_tasks: deploy.yml

- name: Set mysql root password
  shell: |
    mysqladmin -u root password "{{ db_root_password }}"
  args:
    creates: /root/.mysql_secured

- name: Create MariaDB database
  shell: |
    mysql -u root -p{{ db_root_password }} -e "CREATE DATABASE IF NOT EXISTS {{ db_name }}"

- name: Check if MySQL user 'nobody' exists
  shell: |
    mysql -u root -p{{ db_root_password }} -e "SELECT COUNT(*) FROM mysql.user WHERE user = 'nobody';"
  register: nobody_user_check

# Create MySQL user 'nobody' if it doesn't exist
- name: Create MySQL user 'nobody' if not exists
  shell: |
    mysql -u root -p{{ db_root_password }} -e "CREATE USER 'nobody'@'localhost' IDENTIFIED BY 'nobody_password';"
  when: (nobody_user_check.stdout_lines[1] | int) == 0
  register: create_user

# Grant privileges to 'nobody' for the specified database
- name: Grant privileges to 'nobody' for the specified database
  shell: |
    mysql -u root -p{{ db_root_password }} -e "GRANT ALL PRIVILEGES ON {{ db_name }}.* TO 'nobody'@'localhost';"

# Add backup cronjob
- include_tasks: backup.yml
  vars:
    property: main
    backup_name: "main-{{ ansible_date_time.date }}"
